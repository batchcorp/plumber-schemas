syntax = "proto3";

package protos;

import "common/auth.proto";
import "common/status.proto";
import "encoding/options.proto";
import "records/base.proto";
import "backends/kafka.proto";
import "backends/activemq.proto";
import "backends/aws-sns.proto";
import "backends/aws-sqs.proto";
import "backends/mongo.proto";
import "backends/nats.proto";
import "backends/nats-streaming.proto";
import "backends/nsq.proto";
import "backends/postgres.proto";
import "backends/pulsar.proto";
import "backends/rabbit.proto";
import "backends/rabbit-streams.proto";
import "backends/redis-pubsub.proto";
import "backends/redis-streams.proto";
import "backends/azure-service-bus.proto";
import "backends/azure-event-hub.proto";
import "backends/kubemq.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message SampleOptions {
    enum Interval {
        SECOND = 0;
        MINUTE = 1;
    }

    uint32 sample_rate = 1;
    Interval sample_interval = 2;
}

message ReadOptions {
    enum Type {
        ONE_TIME = 0;
        CONTINUOUS = 1;
    }

    SampleOptions sample_options = 1;
}

message ReadCLIConfig {
    bool treat_output_as_json = 1;
    bool display_lag_stats = 2;
    string convert_output = 3;
    bool verbose_output = 4;
}

message ReadConfig {
    // Automatically set by plumber when a new read is created
    string _id = 1;

    // Used by plumber to set read state
    bool _active = 2;

    // Required; friendly name for the read
    string name = 3;

    // Required for server mode; ignored in CLI mode.
    string connection_id = 4;

    // Required; options specifying how to read data
    ReadOptions read_options = 5;

    // Optional; options specify how to decode the _value_ in a message.
    // If left unset, plumber will still populate records.ReadRecord.Decoded
    // with the (untouched) value.
    encoding.Options decode_options = 6;

    // Optional; contains options specific to the CLI
    ReadCLIConfig _cli_config = 7;

    oneof Backends {
        backends.Kafka kafka = 100;
        backends.ActiveMQ active_mq = 101;
        backends.AWSSQS awssqs = 102;
        backends.AWSSNS awssns = 103;
        backends.Mongo mongo = 104;
        backends.Nats nats = 105;
        backends.NatsStreaming nats_streaming = 106;
        backends.NSQ nsq = 107;
        backends.Postgres postgres = 108;
        backends.Pulsar pulsar = 109;
        backends.Rabbit rabbit = 110;
        backends.RabbitStreams rabbit_streams = 111;
        backends.RedisPubsub redis_pubsub = 112;
        backends.RedisStreams redis_streams = 113;
        backends.AzureEventHub azure_event_hub = 114;
        backends.AzureServiceBus azure_service_bus = 115;
        backends.KubeMQ kubemq = 116;
    }
}


message CreateReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    ReadConfig config = 1;
}

message CreateReadResponse {
    common.Status status = 1000;

    // Assigned and returned by plumber-server to identify a successful read request
    string read_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

message StopReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message StopReadResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message ResumeReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message ResumeReadResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message DeleteReadResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message StartReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message StartReadResponse {
    repeated records.ReadRecord records = 1;

    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message GetAllReadsRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllReadsResponse {
    repeated ReadConfig read = 1;

    common.Status status = 1000;
}
