syntax = "proto3";

package protos;

import "conns/kafka.proto";
import "conns/activemq.proto";
import "conns/aws-sns.proto";
import "conns/aws-sqs.proto";
import "conns/mongo.proto";
import "conns/nats.proto";
import "conns/nats-streaming.proto";
import "conns/nsq.proto";
import "conns/postgres.proto";
import "conns/pulsar.proto";
import "conns/rabbit.proto";
import "conns/rabbit-streams.proto";
import "conns/redis-pubsub.proto";
import "conns/redis-streams.proto";
import "conns/azure-service-bus.proto";
import "conns/azure-event-hub.proto";
import "conns/kubemq.proto";
import "common/auth.proto";
import "common/status.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message ConnectionConfig {
    // Friendly name to identify this connection by (used in plumber-server logs)
    string name = 1;

    // Any notes associated with this connection (stored plumber-server side)
    string notes = 2;

    string id = 3;

    oneof conn {
        conns.Kafka kafka = 100;
        conns.ActiveMQ active_mq = 101;
        conns.AWSSQS awssqs = 102;
        conns.AWSSNS awssns = 103;
        conns.Mongo mongo = 104;
        conns.Nats nats = 105;
        conns.NatsStreaming nats_streaming = 106;
        conns.NSQ nsq = 107;
        conns.Postgres postgres = 108;
        conns.Pulsar pulsar = 109;
        conns.Rabbit rabbit = 110;
        conns.RabbitStreams rabbit_streams = 111;
        conns.RedisPubsub redis_pubsub = 112;
        conns.RedisStreams redis_streams = 113;
        conns.AzureEventHub azure_event_hub = 114;
        conns.AzureServiceBus azure_service_bus = 115;
        conns.KubeMQ kubemq  = 116;
    }
}

message GetAllConnectionsRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllConnectionsResponse {
    repeated ConnectionConfig configs = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GetConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string connection_id = 1;
}

message GetConnectionResponse {
    ConnectionConfig connection = 1;
}

///////////////////////////////////////////////////////////////////////////////

message CreateConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    ConnectionConfig config = 1;
}

message CreateConnectionResponse {
    // Set with uuid that represents connection if create is successful
    string connection_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

message TestConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    ConnectionConfig config = 1;
}

message TestConnectionResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message UpdateConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string connection_id = 1;

    ConnectionConfig config = 2;
}

message UpdateConnectionResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string connection_id = 1;
}

message DeleteConnectionResponse {
    common.Status status = 1000;
}
