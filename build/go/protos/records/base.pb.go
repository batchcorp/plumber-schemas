// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/base.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Returned for read requests (server & cli)
type ReadRecord struct {
	// Unique id automatically created by plumber
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Identifies which plumber instance received the event
	PlumberId string `protobuf:"bytes,2,opt,name=plumber_id,json=plumberId,proto3" json:"plumber_id,omitempty"`
	// Metadata may contain properties that cannot be found in the Raw message.
	// For example: read lag in Kafka.
	//
	// Metadata may also contain data such as "count" which is an incremental
	// number that plumber assigns to each message it receives. This is used
	// with read via CLI functionality to allow the user to quickly discern
	// whether this is message #1 or #500, etc.
	Metadata map[string][]byte `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Original backend message (encoded with gob, ie. *skafka.Message, etc.)
	Raw []byte `protobuf:"bytes,4,opt,name=raw,proto3" json:"raw,omitempty"`
	// UTC unix timestamp of when plumber received the message (a backend record
	// entry might have its own timestamp as well).
	ReceivedAtUnixTsUtc int64 `protobuf:"varint,5,opt,name=received_at_unix_ts_utc,json=receivedAtUnixTsUtc,proto3" json:"received_at_unix_ts_utc,omitempty"`
	// Set _outside_ the backend; will contain the final value, regardless of
	// whether decoding options were specified for a read.
	XDecoded []byte `protobuf:"bytes,99,opt,name=_decoded,json=Decoded,proto3" json:"_decoded,omitempty"`
	// Types that are valid to be assigned to Record:
	//	*ReadRecord_Kafka
	//	*ReadRecord_ActiveMq
	//	*ReadRecord_Awssqs
	//	*ReadRecord_Mongo
	//	*ReadRecord_Nats
	//	*ReadRecord_NatsStreaming
	//	*ReadRecord_Nsq
	//	*ReadRecord_Postgres
	//	*ReadRecord_Pulsar
	//	*ReadRecord_Rabbit
	//	*ReadRecord_RabbitStreams
	//	*ReadRecord_RedisPubsub
	//	*ReadRecord_RedisStreams
	//	*ReadRecord_AzureEventHub
	//	*ReadRecord_AzureServiceBus
	//	*ReadRecord_Mqtt
	//	*ReadRecord_Kubemq
	Record               isReadRecord_Record `protobuf_oneof:"Record"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReadRecord) Reset()         { *m = ReadRecord{} }
func (m *ReadRecord) String() string { return proto.CompactTextString(m) }
func (*ReadRecord) ProtoMessage()    {}
func (*ReadRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd29fa8a30a39852, []int{0}
}

func (m *ReadRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRecord.Unmarshal(m, b)
}
func (m *ReadRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRecord.Marshal(b, m, deterministic)
}
func (m *ReadRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRecord.Merge(m, src)
}
func (m *ReadRecord) XXX_Size() int {
	return xxx_messageInfo_ReadRecord.Size(m)
}
func (m *ReadRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRecord proto.InternalMessageInfo

func (m *ReadRecord) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *ReadRecord) GetPlumberId() string {
	if m != nil {
		return m.PlumberId
	}
	return ""
}

func (m *ReadRecord) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ReadRecord) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *ReadRecord) GetReceivedAtUnixTsUtc() int64 {
	if m != nil {
		return m.ReceivedAtUnixTsUtc
	}
	return 0
}

func (m *ReadRecord) GetXDecoded() []byte {
	if m != nil {
		return m.XDecoded
	}
	return nil
}

type isReadRecord_Record interface {
	isReadRecord_Record()
}

type ReadRecord_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type ReadRecord_ActiveMq struct {
	ActiveMq *ActiveMQ `protobuf:"bytes,101,opt,name=active_mq,json=activeMq,proto3,oneof"`
}

type ReadRecord_Awssqs struct {
	Awssqs *AWSSQS `protobuf:"bytes,102,opt,name=awssqs,proto3,oneof"`
}

type ReadRecord_Mongo struct {
	Mongo *Mongo `protobuf:"bytes,103,opt,name=mongo,proto3,oneof"`
}

type ReadRecord_Nats struct {
	Nats *Nats `protobuf:"bytes,104,opt,name=nats,proto3,oneof"`
}

type ReadRecord_NatsStreaming struct {
	NatsStreaming *NatsStreaming `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type ReadRecord_Nsq struct {
	Nsq *NSQ `protobuf:"bytes,106,opt,name=nsq,proto3,oneof"`
}

type ReadRecord_Postgres struct {
	Postgres *Postgres `protobuf:"bytes,107,opt,name=postgres,proto3,oneof"`
}

type ReadRecord_Pulsar struct {
	Pulsar *Pulsar `protobuf:"bytes,108,opt,name=pulsar,proto3,oneof"`
}

type ReadRecord_Rabbit struct {
	Rabbit *Rabbit `protobuf:"bytes,109,opt,name=rabbit,proto3,oneof"`
}

type ReadRecord_RabbitStreams struct {
	RabbitStreams *RabbitStreams `protobuf:"bytes,110,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type ReadRecord_RedisPubsub struct {
	RedisPubsub *RedisPubsub `protobuf:"bytes,111,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type ReadRecord_RedisStreams struct {
	RedisStreams *RedisStreams `protobuf:"bytes,112,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type ReadRecord_AzureEventHub struct {
	AzureEventHub *AzureEventHub `protobuf:"bytes,113,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

type ReadRecord_AzureServiceBus struct {
	AzureServiceBus *AzureServiceBus `protobuf:"bytes,114,opt,name=azure_service_bus,json=azureServiceBus,proto3,oneof"`
}

type ReadRecord_Mqtt struct {
	Mqtt *MQTT `protobuf:"bytes,115,opt,name=mqtt,proto3,oneof"`
}

type ReadRecord_Kubemq struct {
	Kubemq *KubeMQ `protobuf:"bytes,116,opt,name=kubemq,proto3,oneof"`
}

func (*ReadRecord_Kafka) isReadRecord_Record() {}

func (*ReadRecord_ActiveMq) isReadRecord_Record() {}

func (*ReadRecord_Awssqs) isReadRecord_Record() {}

func (*ReadRecord_Mongo) isReadRecord_Record() {}

func (*ReadRecord_Nats) isReadRecord_Record() {}

func (*ReadRecord_NatsStreaming) isReadRecord_Record() {}

func (*ReadRecord_Nsq) isReadRecord_Record() {}

func (*ReadRecord_Postgres) isReadRecord_Record() {}

func (*ReadRecord_Pulsar) isReadRecord_Record() {}

func (*ReadRecord_Rabbit) isReadRecord_Record() {}

func (*ReadRecord_RabbitStreams) isReadRecord_Record() {}

func (*ReadRecord_RedisPubsub) isReadRecord_Record() {}

func (*ReadRecord_RedisStreams) isReadRecord_Record() {}

func (*ReadRecord_AzureEventHub) isReadRecord_Record() {}

func (*ReadRecord_AzureServiceBus) isReadRecord_Record() {}

func (*ReadRecord_Mqtt) isReadRecord_Record() {}

func (*ReadRecord_Kubemq) isReadRecord_Record() {}

func (m *ReadRecord) GetRecord() isReadRecord_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *ReadRecord) GetKafka() *Kafka {
	if x, ok := m.GetRecord().(*ReadRecord_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *ReadRecord) GetActiveMq() *ActiveMQ {
	if x, ok := m.GetRecord().(*ReadRecord_ActiveMq); ok {
		return x.ActiveMq
	}
	return nil
}

func (m *ReadRecord) GetAwssqs() *AWSSQS {
	if x, ok := m.GetRecord().(*ReadRecord_Awssqs); ok {
		return x.Awssqs
	}
	return nil
}

func (m *ReadRecord) GetMongo() *Mongo {
	if x, ok := m.GetRecord().(*ReadRecord_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (m *ReadRecord) GetNats() *Nats {
	if x, ok := m.GetRecord().(*ReadRecord_Nats); ok {
		return x.Nats
	}
	return nil
}

func (m *ReadRecord) GetNatsStreaming() *NatsStreaming {
	if x, ok := m.GetRecord().(*ReadRecord_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (m *ReadRecord) GetNsq() *NSQ {
	if x, ok := m.GetRecord().(*ReadRecord_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (m *ReadRecord) GetPostgres() *Postgres {
	if x, ok := m.GetRecord().(*ReadRecord_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (m *ReadRecord) GetPulsar() *Pulsar {
	if x, ok := m.GetRecord().(*ReadRecord_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (m *ReadRecord) GetRabbit() *Rabbit {
	if x, ok := m.GetRecord().(*ReadRecord_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (m *ReadRecord) GetRabbitStreams() *RabbitStreams {
	if x, ok := m.GetRecord().(*ReadRecord_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (m *ReadRecord) GetRedisPubsub() *RedisPubsub {
	if x, ok := m.GetRecord().(*ReadRecord_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (m *ReadRecord) GetRedisStreams() *RedisStreams {
	if x, ok := m.GetRecord().(*ReadRecord_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (m *ReadRecord) GetAzureEventHub() *AzureEventHub {
	if x, ok := m.GetRecord().(*ReadRecord_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}

func (m *ReadRecord) GetAzureServiceBus() *AzureServiceBus {
	if x, ok := m.GetRecord().(*ReadRecord_AzureServiceBus); ok {
		return x.AzureServiceBus
	}
	return nil
}

func (m *ReadRecord) GetMqtt() *MQTT {
	if x, ok := m.GetRecord().(*ReadRecord_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (m *ReadRecord) GetKubemq() *KubeMQ {
	if x, ok := m.GetRecord().(*ReadRecord_Kubemq); ok {
		return x.Kubemq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReadRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReadRecord_Kafka)(nil),
		(*ReadRecord_ActiveMq)(nil),
		(*ReadRecord_Awssqs)(nil),
		(*ReadRecord_Mongo)(nil),
		(*ReadRecord_Nats)(nil),
		(*ReadRecord_NatsStreaming)(nil),
		(*ReadRecord_Nsq)(nil),
		(*ReadRecord_Postgres)(nil),
		(*ReadRecord_Pulsar)(nil),
		(*ReadRecord_Rabbit)(nil),
		(*ReadRecord_RabbitStreams)(nil),
		(*ReadRecord_RedisPubsub)(nil),
		(*ReadRecord_RedisStreams)(nil),
		(*ReadRecord_AzureEventHub)(nil),
		(*ReadRecord_AzureServiceBus)(nil),
		(*ReadRecord_Mqtt)(nil),
		(*ReadRecord_Kubemq)(nil),
	}
}

// Used as an arg for write requests (server & cli)
type WriteRecord struct {
	// Set _outside_ the backend; will contain the final value that will be
	// written to the destination, regardless of whether encoding options were
	// specified for the write.
	XEncoded []byte `protobuf:"bytes,1,opt,name=_encoded,json=Encoded,proto3" json:"_encoded,omitempty"`
	// Types that are valid to be assigned to Records:
	//	*WriteRecord_Kafka
	//	*WriteRecord_ActiveMq
	//	*WriteRecord_Awssqs
	//	*WriteRecord_Mongo
	//	*WriteRecord_Nats
	//	*WriteRecord_NatsStreaming
	//	*WriteRecord_Nsq
	//	*WriteRecord_Postgres
	//	*WriteRecord_Pulsar
	//	*WriteRecord_Rabbit
	//	*WriteRecord_RabbitStreams
	//	*WriteRecord_RedisPubsub
	//	*WriteRecord_RedisStreams
	//	*WriteRecord_AzureEventHub
	//	*WriteRecord_AzureServiceBus
	//	*WriteRecord_Mqtt
	//	*WriteRecord_Kubemq
	Records              isWriteRecord_Records `protobuf_oneof:"Records"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WriteRecord) Reset()         { *m = WriteRecord{} }
func (m *WriteRecord) String() string { return proto.CompactTextString(m) }
func (*WriteRecord) ProtoMessage()    {}
func (*WriteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd29fa8a30a39852, []int{1}
}

func (m *WriteRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRecord.Unmarshal(m, b)
}
func (m *WriteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRecord.Marshal(b, m, deterministic)
}
func (m *WriteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRecord.Merge(m, src)
}
func (m *WriteRecord) XXX_Size() int {
	return xxx_messageInfo_WriteRecord.Size(m)
}
func (m *WriteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRecord proto.InternalMessageInfo

func (m *WriteRecord) GetXEncoded() []byte {
	if m != nil {
		return m.XEncoded
	}
	return nil
}

type isWriteRecord_Records interface {
	isWriteRecord_Records()
}

type WriteRecord_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type WriteRecord_ActiveMq struct {
	ActiveMq *ActiveMQ `protobuf:"bytes,101,opt,name=active_mq,json=activeMq,proto3,oneof"`
}

type WriteRecord_Awssqs struct {
	Awssqs *AWSSQS `protobuf:"bytes,102,opt,name=awssqs,proto3,oneof"`
}

type WriteRecord_Mongo struct {
	Mongo *Mongo `protobuf:"bytes,103,opt,name=mongo,proto3,oneof"`
}

type WriteRecord_Nats struct {
	Nats *Nats `protobuf:"bytes,104,opt,name=nats,proto3,oneof"`
}

type WriteRecord_NatsStreaming struct {
	NatsStreaming *NatsStreaming `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type WriteRecord_Nsq struct {
	Nsq *NSQ `protobuf:"bytes,106,opt,name=nsq,proto3,oneof"`
}

type WriteRecord_Postgres struct {
	Postgres *Postgres `protobuf:"bytes,107,opt,name=postgres,proto3,oneof"`
}

type WriteRecord_Pulsar struct {
	Pulsar *Pulsar `protobuf:"bytes,108,opt,name=pulsar,proto3,oneof"`
}

type WriteRecord_Rabbit struct {
	Rabbit *Rabbit `protobuf:"bytes,109,opt,name=rabbit,proto3,oneof"`
}

type WriteRecord_RabbitStreams struct {
	RabbitStreams *RabbitStreams `protobuf:"bytes,110,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type WriteRecord_RedisPubsub struct {
	RedisPubsub *RedisPubsub `protobuf:"bytes,111,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type WriteRecord_RedisStreams struct {
	RedisStreams *RedisStreams `protobuf:"bytes,112,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type WriteRecord_AzureEventHub struct {
	AzureEventHub *AzureEventHub `protobuf:"bytes,113,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

type WriteRecord_AzureServiceBus struct {
	AzureServiceBus *AzureServiceBus `protobuf:"bytes,114,opt,name=azure_service_bus,json=azureServiceBus,proto3,oneof"`
}

type WriteRecord_Mqtt struct {
	Mqtt *MQTT `protobuf:"bytes,115,opt,name=mqtt,proto3,oneof"`
}

type WriteRecord_Kubemq struct {
	Kubemq *KubeMQ `protobuf:"bytes,116,opt,name=kubemq,proto3,oneof"`
}

func (*WriteRecord_Kafka) isWriteRecord_Records() {}

func (*WriteRecord_ActiveMq) isWriteRecord_Records() {}

func (*WriteRecord_Awssqs) isWriteRecord_Records() {}

func (*WriteRecord_Mongo) isWriteRecord_Records() {}

func (*WriteRecord_Nats) isWriteRecord_Records() {}

func (*WriteRecord_NatsStreaming) isWriteRecord_Records() {}

func (*WriteRecord_Nsq) isWriteRecord_Records() {}

func (*WriteRecord_Postgres) isWriteRecord_Records() {}

func (*WriteRecord_Pulsar) isWriteRecord_Records() {}

func (*WriteRecord_Rabbit) isWriteRecord_Records() {}

func (*WriteRecord_RabbitStreams) isWriteRecord_Records() {}

func (*WriteRecord_RedisPubsub) isWriteRecord_Records() {}

func (*WriteRecord_RedisStreams) isWriteRecord_Records() {}

func (*WriteRecord_AzureEventHub) isWriteRecord_Records() {}

func (*WriteRecord_AzureServiceBus) isWriteRecord_Records() {}

func (*WriteRecord_Mqtt) isWriteRecord_Records() {}

func (*WriteRecord_Kubemq) isWriteRecord_Records() {}

func (m *WriteRecord) GetRecords() isWriteRecord_Records {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *WriteRecord) GetKafka() *Kafka {
	if x, ok := m.GetRecords().(*WriteRecord_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *WriteRecord) GetActiveMq() *ActiveMQ {
	if x, ok := m.GetRecords().(*WriteRecord_ActiveMq); ok {
		return x.ActiveMq
	}
	return nil
}

func (m *WriteRecord) GetAwssqs() *AWSSQS {
	if x, ok := m.GetRecords().(*WriteRecord_Awssqs); ok {
		return x.Awssqs
	}
	return nil
}

func (m *WriteRecord) GetMongo() *Mongo {
	if x, ok := m.GetRecords().(*WriteRecord_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (m *WriteRecord) GetNats() *Nats {
	if x, ok := m.GetRecords().(*WriteRecord_Nats); ok {
		return x.Nats
	}
	return nil
}

func (m *WriteRecord) GetNatsStreaming() *NatsStreaming {
	if x, ok := m.GetRecords().(*WriteRecord_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (m *WriteRecord) GetNsq() *NSQ {
	if x, ok := m.GetRecords().(*WriteRecord_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (m *WriteRecord) GetPostgres() *Postgres {
	if x, ok := m.GetRecords().(*WriteRecord_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (m *WriteRecord) GetPulsar() *Pulsar {
	if x, ok := m.GetRecords().(*WriteRecord_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (m *WriteRecord) GetRabbit() *Rabbit {
	if x, ok := m.GetRecords().(*WriteRecord_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (m *WriteRecord) GetRabbitStreams() *RabbitStreams {
	if x, ok := m.GetRecords().(*WriteRecord_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (m *WriteRecord) GetRedisPubsub() *RedisPubsub {
	if x, ok := m.GetRecords().(*WriteRecord_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (m *WriteRecord) GetRedisStreams() *RedisStreams {
	if x, ok := m.GetRecords().(*WriteRecord_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (m *WriteRecord) GetAzureEventHub() *AzureEventHub {
	if x, ok := m.GetRecords().(*WriteRecord_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}

func (m *WriteRecord) GetAzureServiceBus() *AzureServiceBus {
	if x, ok := m.GetRecords().(*WriteRecord_AzureServiceBus); ok {
		return x.AzureServiceBus
	}
	return nil
}

func (m *WriteRecord) GetMqtt() *MQTT {
	if x, ok := m.GetRecords().(*WriteRecord_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (m *WriteRecord) GetKubemq() *KubeMQ {
	if x, ok := m.GetRecords().(*WriteRecord_Kubemq); ok {
		return x.Kubemq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WriteRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WriteRecord_Kafka)(nil),
		(*WriteRecord_ActiveMq)(nil),
		(*WriteRecord_Awssqs)(nil),
		(*WriteRecord_Mongo)(nil),
		(*WriteRecord_Nats)(nil),
		(*WriteRecord_NatsStreaming)(nil),
		(*WriteRecord_Nsq)(nil),
		(*WriteRecord_Postgres)(nil),
		(*WriteRecord_Pulsar)(nil),
		(*WriteRecord_Rabbit)(nil),
		(*WriteRecord_RabbitStreams)(nil),
		(*WriteRecord_RedisPubsub)(nil),
		(*WriteRecord_RedisStreams)(nil),
		(*WriteRecord_AzureEventHub)(nil),
		(*WriteRecord_AzureServiceBus)(nil),
		(*WriteRecord_Mqtt)(nil),
		(*WriteRecord_Kubemq)(nil),
	}
}

// Used for communicating errors that occur during a read, write, relay, etc.
type ErrorRecord struct {
	OccurredAtUnixTsUtc  int64             `protobuf:"varint,1,opt,name=occurred_at_unix_ts_utc,json=occurredAtUnixTsUtc,proto3" json:"occurred_at_unix_ts_utc,omitempty"`
	Error                string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Metadata             map[string][]byte `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ErrorRecord) Reset()         { *m = ErrorRecord{} }
func (m *ErrorRecord) String() string { return proto.CompactTextString(m) }
func (*ErrorRecord) ProtoMessage()    {}
func (*ErrorRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd29fa8a30a39852, []int{2}
}

func (m *ErrorRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorRecord.Unmarshal(m, b)
}
func (m *ErrorRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorRecord.Marshal(b, m, deterministic)
}
func (m *ErrorRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorRecord.Merge(m, src)
}
func (m *ErrorRecord) XXX_Size() int {
	return xxx_messageInfo_ErrorRecord.Size(m)
}
func (m *ErrorRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorRecord proto.InternalMessageInfo

func (m *ErrorRecord) GetOccurredAtUnixTsUtc() int64 {
	if m != nil {
		return m.OccurredAtUnixTsUtc
	}
	return 0
}

func (m *ErrorRecord) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ErrorRecord) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadRecord)(nil), "protos.records.ReadRecord")
	proto.RegisterMapType((map[string][]byte)(nil), "protos.records.ReadRecord.MetadataEntry")
	proto.RegisterType((*WriteRecord)(nil), "protos.records.WriteRecord")
	proto.RegisterType((*ErrorRecord)(nil), "protos.records.ErrorRecord")
	proto.RegisterMapType((map[string][]byte)(nil), "protos.records.ErrorRecord.MetadataEntry")
}

func init() { proto.RegisterFile("records/base.proto", fileDescriptor_cd29fa8a30a39852) }

var fileDescriptor_cd29fa8a30a39852 = []byte{
	// 894 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xdf, 0x6f, 0xe3, 0x44,
	0x10, 0x8e, 0x2f, 0x97, 0x36, 0xd9, 0x34, 0x07, 0xb7, 0xcd, 0xdd, 0x2d, 0xb9, 0xab, 0x2e, 0xea,
	0x0b, 0x01, 0xc9, 0x09, 0x3a, 0x4e, 0x80, 0x00, 0x21, 0x5a, 0x2e, 0x90, 0xaa, 0x0a, 0x6a, 0x9d,
	0x56, 0x95, 0x78, 0xb1, 0xd6, 0xf6, 0x36, 0x31, 0x89, 0xed, 0x78, 0x7f, 0xa4, 0x2d, 0x6f, 0xfc,
	0xa1, 0xfc, 0x23, 0x3c, 0xa1, 0xfd, 0x61, 0x27, 0x71, 0xcc, 0x13, 0x6f, 0xa8, 0x4f, 0xf6, 0xce,
	0xf7, 0xcd, 0xec, 0x78, 0x3c, 0xf3, 0x69, 0x00, 0xa4, 0xc4, 0x4f, 0x68, 0xc0, 0x06, 0x1e, 0x66,
	0xa4, 0xbf, 0xa4, 0x09, 0x4f, 0xe0, 0x33, 0xf5, 0x60, 0x7d, 0x03, 0x75, 0x0e, 0x33, 0xce, 0x1c,
	0xdf, 0xce, 0xb1, 0x26, 0x75, 0x5e, 0x66, 0x46, 0xec, 0xf3, 0x70, 0x45, 0xa2, 0xd4, 0xd8, 0x5f,
	0xe4, 0xf6, 0x3b, 0x66, 0xb3, 0x94, 0x19, 0x73, 0x1e, 0x23, 0x4a, 0xe2, 0x69, 0x62, 0x8c, 0xf9,
	0xe5, 0x31, 0xe6, 0x19, 0xf1, 0xcd, 0xa6, 0xcd, 0x66, 0x9c, 0x12, 0x1c, 0x85, 0xf1, 0xd4, 0xa0,
	0xcf, 0x73, 0x94, 0xa5, 0xc5, 0x44, 0x96, 0x09, 0xe3, 0x53, 0x4a, 0xb2, 0x40, 0xed, 0xdc, 0x2e,
	0x16, 0x0c, 0xd3, 0xa2, 0x95, 0x62, 0xcf, 0x0b, 0x79, 0xf1, 0x52, 0x6d, 0x35, 0xd7, 0x66, 0x91,
	0x3a, 0x39, 0x4a, 0x82, 0x90, 0xd9, 0x4b, 0xe1, 0x31, 0xe1, 0x19, 0xec, 0xf5, 0x36, 0xb6, 0xed,
	0xf8, 0x36, 0xaf, 0xc5, 0x1f, 0x82, 0x12, 0x9b, 0x11, 0xba, 0x0a, 0x7d, 0x62, 0x7b, 0x22, 0x23,
	0x1c, 0x6d, 0x13, 0xc8, 0x8a, 0xc4, 0xdc, 0x9e, 0xe5, 0xc1, 0xf3, 0xfa, 0x44, 0x29, 0xe7, 0xc5,
	0x0f, 0x98, 0x0b, 0x2f, 0xaf, 0xfa, 0xf1, 0x9f, 0x00, 0x00, 0x87, 0xe0, 0xc0, 0x51, 0x20, 0x3c,
	0x02, 0x20, 0x22, 0x8c, 0xe1, 0x29, 0x71, 0xc3, 0x00, 0x59, 0x5d, 0xab, 0xd7, 0x70, 0x1a, 0xc6,
	0x72, 0xa6, 0xe0, 0xe5, 0x42, 0x44, 0x1e, 0xa1, 0x12, 0x7e, 0xa2, 0x61, 0x63, 0x39, 0x0b, 0xe0,
	0x07, 0x50, 0x8f, 0x08, 0xc7, 0x01, 0xe6, 0x18, 0x55, 0xbb, 0xd5, 0x5e, 0xf3, 0x5d, 0xaf, 0xbf,
	0xdd, 0x12, 0xfd, 0xf5, 0x5d, 0xfd, 0xb1, 0xa1, 0x0e, 0x63, 0x4e, 0x1f, 0x9c, 0xdc, 0x13, 0x7e,
	0x0c, 0xaa, 0x14, 0xdf, 0xa1, 0xa7, 0x5d, 0xab, 0x77, 0xe0, 0xc8, 0x57, 0xf8, 0x1e, 0xbc, 0xa2,
	0xc4, 0x27, 0xe1, 0x8a, 0x04, 0x2e, 0xe6, 0xae, 0x88, 0xc3, 0x7b, 0x97, 0x33, 0x57, 0x70, 0x1f,
	0xd5, 0xba, 0x56, 0xaf, 0xea, 0x1c, 0x66, 0xf0, 0x09, 0xbf, 0x8e, 0xc3, 0xfb, 0x2b, 0x76, 0xcd,
	0x7d, 0xf8, 0x09, 0xa8, 0xbb, 0x01, 0xf1, 0x93, 0x80, 0x04, 0xc8, 0x57, 0xc1, 0xf6, 0x3f, 0xe8,
	0x23, 0xb4, 0x41, 0x4d, 0xb5, 0x24, 0x0a, 0xba, 0x56, 0xaf, 0xf9, 0xee, 0x45, 0x31, 0xcb, 0x73,
	0x09, 0x8e, 0x2a, 0x8e, 0x66, 0xc1, 0xaf, 0x41, 0x43, 0x37, 0xab, 0x1b, 0xa5, 0x88, 0x28, 0x17,
	0x54, 0x74, 0x39, 0x51, 0x84, 0xf1, 0xe5, 0xa8, 0xe2, 0xd4, 0x35, 0x79, 0x9c, 0xc2, 0x2f, 0xc0,
	0x1e, 0xbe, 0x63, 0x2c, 0x65, 0xe8, 0x56, 0x79, 0xbd, 0xdc, 0xf1, 0xba, 0x99, 0x4c, 0x2e, 0x27,
	0xa3, 0x8a, 0x63, 0x78, 0x32, 0x33, 0xd5, 0xe8, 0x68, 0x5a, 0x9e, 0xd9, 0x58, 0x82, 0x32, 0x33,
	0xc5, 0x82, 0x9f, 0x83, 0xa7, 0xb2, 0xdd, 0xd1, 0x4c, 0xb1, 0xdb, 0x45, 0xf6, 0xaf, 0x98, 0xb3,
	0x51, 0xc5, 0x51, 0x1c, 0xf8, 0x33, 0x78, 0x26, 0x9f, 0x6e, 0x3e, 0x1a, 0x28, 0x54, 0x5e, 0x47,
	0x65, 0x5e, 0x93, 0x8c, 0x34, 0xaa, 0x38, 0xad, 0x78, 0xd3, 0x00, 0x3f, 0x05, 0xd5, 0x98, 0xa5,
	0xe8, 0x77, 0xe5, 0x7c, 0xb8, 0xe3, 0x3c, 0x91, 0x25, 0x90, 0x0c, 0xf8, 0x15, 0xa8, 0x67, 0xa3,
	0x85, 0xe6, 0xe5, 0x55, 0xbb, 0x30, 0xb8, 0xac, 0x5a, 0xc6, 0x95, 0x55, 0xd3, 0xa3, 0x87, 0x16,
	0xe5, 0x55, 0xbb, 0x50, 0xa8, 0xac, 0x9a, 0xe6, 0x49, 0x0f, 0x3d, 0x80, 0x28, 0x2a, 0xf7, 0x70,
	0x14, 0x2a, 0x3d, 0x34, 0x4f, 0x16, 0x43, 0xbf, 0x99, 0x72, 0x30, 0x14, 0x97, 0x17, 0x43, 0x7b,
	0xea, 0xaf, 0x97, 0x69, 0xb6, 0xe8, 0xa6, 0x01, 0xfe, 0x08, 0x0e, 0xd4, 0x00, 0xbb, 0x7a, 0xb8,
	0x51, 0xa2, 0xa2, 0xbc, 0xde, 0x6d, 0xfb, 0x20, 0x64, 0x17, 0x8a, 0x32, 0xaa, 0x38, 0x4d, 0xba,
	0x3e, 0xc2, 0x9f, 0x40, 0x4b, 0x47, 0xc8, 0x12, 0x59, 0xaa, 0x10, 0x6f, 0x4a, 0x43, 0xac, 0xf3,
	0xd0, 0xd7, 0x66, 0x69, 0xfc, 0x02, 0x3e, 0x52, 0x4a, 0xe0, 0x2a, 0x25, 0x70, 0x67, 0xc2, 0x43,
	0x69, 0xf9, 0xf7, 0x9c, 0x48, 0xda, 0x50, 0xb2, 0x46, 0x2a, 0x97, 0x16, 0xde, 0x34, 0xc0, 0x31,
	0x78, 0xae, 0x03, 0x19, 0xcd, 0x71, 0x3d, 0xc1, 0x10, 0x55, 0xa1, 0xde, 0x96, 0x86, 0x9a, 0x68,
	0xde, 0xa9, 0x90, 0x49, 0xe9, 0x24, 0xd6, 0x26, 0xd9, 0x9f, 0x52, 0x82, 0x10, 0x2b, 0xef, 0xcf,
	0xf1, 0xe5, 0xd5, 0x95, 0xec, 0x4f, 0xc9, 0x91, 0x3f, 0x51, 0x4b, 0x13, 0xe2, 0xe5, 0x3f, 0xf1,
	0x5c, 0x78, 0x7a, 0xc0, 0x0c, 0xaf, 0xf3, 0x1d, 0x68, 0x6d, 0x89, 0x88, 0x94, 0x8e, 0x39, 0x79,
	0x30, 0xba, 0x25, 0x5f, 0x61, 0x1b, 0xd4, 0x56, 0x78, 0x21, 0x88, 0x12, 0xab, 0x03, 0x47, 0x1f,
	0xbe, 0x7d, 0xf2, 0x8d, 0x75, 0x5a, 0x07, 0x7b, 0x5a, 0x88, 0x8e, 0xff, 0xde, 0x07, 0xcd, 0x1b,
	0x1a, 0x72, 0x62, 0x44, 0x50, 0x0a, 0x07, 0x89, 0xb5, 0x70, 0x58, 0x5a, 0x38, 0x86, 0xf1, 0xa3,
	0x70, 0x3c, 0x0a, 0xc7, 0xa3, 0x70, 0xfc, 0x3f, 0x84, 0xe3, 0xb4, 0x01, 0xf6, 0xf5, 0xac, 0xb3,
	0xe3, 0xbf, 0x2c, 0xd0, 0x1c, 0x52, 0x9a, 0x50, 0x33, 0xfc, 0xef, 0xc1, 0xab, 0xc4, 0xf7, 0x05,
	0xa5, 0xbb, 0xbb, 0x86, 0xa5, 0x77, 0x8d, 0x0c, 0xde, 0xdc, 0x35, 0xda, 0xa0, 0x46, 0x64, 0x10,
	0xb3, 0x13, 0xe9, 0x03, 0x1c, 0xee, 0xec, 0x43, 0x9f, 0x15, 0x53, 0xdb, 0xb8, 0xfa, 0xdf, 0x16,
	0xa2, 0xff, 0x26, 0x73, 0x3f, 0xfc, 0xf6, 0xfd, 0x34, 0xe4, 0x72, 0x35, 0xf4, 0x93, 0x68, 0xe0,
	0x61, 0xee, 0xcf, 0xfc, 0x84, 0x2e, 0x07, 0x66, 0x6b, 0xb3, 0x99, 0x3f, 0x23, 0x11, 0x66, 0x03,
	0x4f, 0x84, 0x8b, 0x60, 0x30, 0x4d, 0x06, 0x3a, 0xc1, 0x81, 0x49, 0xd0, 0xdb, 0x53, 0xe7, 0x2f,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xd0, 0x51, 0x00, 0xf0, 0x0b, 0x00, 0x00,
}
