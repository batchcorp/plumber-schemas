// source: connect.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var conns_kafka_pb = require('./conns/kafka_pb.js');
goog.object.extend(proto, conns_kafka_pb);
var conns_activemq_pb = require('./conns/activemq_pb.js');
goog.object.extend(proto, conns_activemq_pb);
var conns_aws$sns_pb = require('./conns/aws-sns_pb.js');
goog.object.extend(proto, conns_aws$sns_pb);
var conns_aws$sqs_pb = require('./conns/aws-sqs_pb.js');
goog.object.extend(proto, conns_aws$sqs_pb);
var conns_mongo_pb = require('./conns/mongo_pb.js');
goog.object.extend(proto, conns_mongo_pb);
var conns_nats_pb = require('./conns/nats_pb.js');
goog.object.extend(proto, conns_nats_pb);
var conns_nats$streaming_pb = require('./conns/nats-streaming_pb.js');
goog.object.extend(proto, conns_nats$streaming_pb);
var conns_nsq_pb = require('./conns/nsq_pb.js');
goog.object.extend(proto, conns_nsq_pb);
var conns_postgres_pb = require('./conns/postgres_pb.js');
goog.object.extend(proto, conns_postgres_pb);
var conns_pulsar_pb = require('./conns/pulsar_pb.js');
goog.object.extend(proto, conns_pulsar_pb);
var conns_rabbit_pb = require('./conns/rabbit_pb.js');
goog.object.extend(proto, conns_rabbit_pb);
var conns_rabbit$streams_pb = require('./conns/rabbit-streams_pb.js');
goog.object.extend(proto, conns_rabbit$streams_pb);
var conns_redis$pubsub_pb = require('./conns/redis-pubsub_pb.js');
goog.object.extend(proto, conns_redis$pubsub_pb);
var conns_redis$streams_pb = require('./conns/redis-streams_pb.js');
goog.object.extend(proto, conns_redis$streams_pb);
var conns_azure$service$bus_pb = require('./conns/azure-service-bus_pb.js');
goog.object.extend(proto, conns_azure$service$bus_pb);
var conns_azure$event$hub_pb = require('./conns/azure-event-hub_pb.js');
goog.object.extend(proto, conns_azure$event$hub_pb);
var conns_kubemq_pb = require('./conns/kubemq_pb.js');
goog.object.extend(proto, conns_kubemq_pb);
var common_auth_pb = require('./common/auth_pb.js');
goog.object.extend(proto, common_auth_pb);
var common_status_pb = require('./common/status_pb.js');
goog.object.extend(proto, common_status_pb);
goog.exportSymbol('proto.protos.ConnectionConfig', null, global);
goog.exportSymbol('proto.protos.ConnectionConfig.ConnCase', null, global);
goog.exportSymbol('proto.protos.CreateConnectionRequest', null, global);
goog.exportSymbol('proto.protos.CreateConnectionResponse', null, global);
goog.exportSymbol('proto.protos.DeleteConnectionRequest', null, global);
goog.exportSymbol('proto.protos.DeleteConnectionResponse', null, global);
goog.exportSymbol('proto.protos.GetAllConnectionsRequest', null, global);
goog.exportSymbol('proto.protos.GetAllConnectionsResponse', null, global);
goog.exportSymbol('proto.protos.GetConnectionRequest', null, global);
goog.exportSymbol('proto.protos.GetConnectionResponse', null, global);
goog.exportSymbol('proto.protos.TestConnectionRequest', null, global);
goog.exportSymbol('proto.protos.TestConnectionResponse', null, global);
goog.exportSymbol('proto.protos.UpdateConnectionRequest', null, global);
goog.exportSymbol('proto.protos.UpdateConnectionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ConnectionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.ConnectionConfig.oneofGroups_);
};
goog.inherits(proto.protos.ConnectionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ConnectionConfig.displayName = 'proto.protos.ConnectionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetAllConnectionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.GetAllConnectionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetAllConnectionsRequest.displayName = 'proto.protos.GetAllConnectionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetAllConnectionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.GetAllConnectionsResponse.repeatedFields_, null);
};
goog.inherits(proto.protos.GetAllConnectionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetAllConnectionsResponse.displayName = 'proto.protos.GetAllConnectionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.GetConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetConnectionRequest.displayName = 'proto.protos.GetConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GetConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.GetConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GetConnectionResponse.displayName = 'proto.protos.GetConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.CreateConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.CreateConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.CreateConnectionRequest.displayName = 'proto.protos.CreateConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.CreateConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.CreateConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.CreateConnectionResponse.displayName = 'proto.protos.CreateConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.TestConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.TestConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.TestConnectionRequest.displayName = 'proto.protos.TestConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.TestConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.TestConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.TestConnectionResponse.displayName = 'proto.protos.TestConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.UpdateConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.UpdateConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.UpdateConnectionRequest.displayName = 'proto.protos.UpdateConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.UpdateConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.UpdateConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.UpdateConnectionResponse.displayName = 'proto.protos.UpdateConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.DeleteConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.DeleteConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.DeleteConnectionRequest.displayName = 'proto.protos.DeleteConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.DeleteConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.protos.DeleteConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.DeleteConnectionResponse.displayName = 'proto.protos.DeleteConnectionResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.ConnectionConfig.oneofGroups_ = [[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]];

/**
 * @enum {number}
 */
proto.protos.ConnectionConfig.ConnCase = {
  CONN_NOT_SET: 0,
  KAFKA: 100,
  ACTIVE_MQ: 101,
  AWSSQS: 102,
  AWSSNS: 103,
  MONGO: 104,
  NATS: 105,
  NATS_STREAMING: 106,
  NSQ: 107,
  POSTGRES: 108,
  PULSAR: 109,
  RABBIT: 110,
  RABBIT_STREAMS: 111,
  REDIS_PUBSUB: 112,
  REDIS_STREAMS: 113,
  AZURE_EVENT_HUB: 114,
  AZURE_SERVICE_BUS: 115,
  KUBEMQ: 116
};

/**
 * @return {proto.protos.ConnectionConfig.ConnCase}
 */
proto.protos.ConnectionConfig.prototype.getConnCase = function() {
  return /** @type {proto.protos.ConnectionConfig.ConnCase} */(jspb.Message.computeOneofCase(this, proto.protos.ConnectionConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ConnectionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ConnectionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ConnectionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ConnectionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    kafka: (f = msg.getKafka()) && conns_kafka_pb.Kafka.toObject(includeInstance, f),
    activeMq: (f = msg.getActiveMq()) && conns_activemq_pb.ActiveMQ.toObject(includeInstance, f),
    awssqs: (f = msg.getAwssqs()) && conns_aws$sqs_pb.AWSSQS.toObject(includeInstance, f),
    awssns: (f = msg.getAwssns()) && conns_aws$sns_pb.AWSSNS.toObject(includeInstance, f),
    mongo: (f = msg.getMongo()) && conns_mongo_pb.Mongo.toObject(includeInstance, f),
    nats: (f = msg.getNats()) && conns_nats_pb.Nats.toObject(includeInstance, f),
    natsStreaming: (f = msg.getNatsStreaming()) && conns_nats$streaming_pb.NatsStreaming.toObject(includeInstance, f),
    nsq: (f = msg.getNsq()) && conns_nsq_pb.NSQ.toObject(includeInstance, f),
    postgres: (f = msg.getPostgres()) && conns_postgres_pb.Postgres.toObject(includeInstance, f),
    pulsar: (f = msg.getPulsar()) && conns_pulsar_pb.Pulsar.toObject(includeInstance, f),
    rabbit: (f = msg.getRabbit()) && conns_rabbit_pb.Rabbit.toObject(includeInstance, f),
    rabbitStreams: (f = msg.getRabbitStreams()) && conns_rabbit$streams_pb.RabbitStreams.toObject(includeInstance, f),
    redisPubsub: (f = msg.getRedisPubsub()) && conns_redis$pubsub_pb.RedisPubsub.toObject(includeInstance, f),
    redisStreams: (f = msg.getRedisStreams()) && conns_redis$streams_pb.RedisStreams.toObject(includeInstance, f),
    azureEventHub: (f = msg.getAzureEventHub()) && conns_azure$event$hub_pb.AzureEventHub.toObject(includeInstance, f),
    azureServiceBus: (f = msg.getAzureServiceBus()) && conns_azure$service$bus_pb.AzureServiceBus.toObject(includeInstance, f),
    kubemq: (f = msg.getKubemq()) && conns_kubemq_pb.KubeMQ.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ConnectionConfig}
 */
proto.protos.ConnectionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ConnectionConfig;
  return proto.protos.ConnectionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ConnectionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ConnectionConfig}
 */
proto.protos.ConnectionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 100:
      var value = new conns_kafka_pb.Kafka;
      reader.readMessage(value,conns_kafka_pb.Kafka.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    case 101:
      var value = new conns_activemq_pb.ActiveMQ;
      reader.readMessage(value,conns_activemq_pb.ActiveMQ.deserializeBinaryFromReader);
      msg.setActiveMq(value);
      break;
    case 102:
      var value = new conns_aws$sqs_pb.AWSSQS;
      reader.readMessage(value,conns_aws$sqs_pb.AWSSQS.deserializeBinaryFromReader);
      msg.setAwssqs(value);
      break;
    case 103:
      var value = new conns_aws$sns_pb.AWSSNS;
      reader.readMessage(value,conns_aws$sns_pb.AWSSNS.deserializeBinaryFromReader);
      msg.setAwssns(value);
      break;
    case 104:
      var value = new conns_mongo_pb.Mongo;
      reader.readMessage(value,conns_mongo_pb.Mongo.deserializeBinaryFromReader);
      msg.setMongo(value);
      break;
    case 105:
      var value = new conns_nats_pb.Nats;
      reader.readMessage(value,conns_nats_pb.Nats.deserializeBinaryFromReader);
      msg.setNats(value);
      break;
    case 106:
      var value = new conns_nats$streaming_pb.NatsStreaming;
      reader.readMessage(value,conns_nats$streaming_pb.NatsStreaming.deserializeBinaryFromReader);
      msg.setNatsStreaming(value);
      break;
    case 107:
      var value = new conns_nsq_pb.NSQ;
      reader.readMessage(value,conns_nsq_pb.NSQ.deserializeBinaryFromReader);
      msg.setNsq(value);
      break;
    case 108:
      var value = new conns_postgres_pb.Postgres;
      reader.readMessage(value,conns_postgres_pb.Postgres.deserializeBinaryFromReader);
      msg.setPostgres(value);
      break;
    case 109:
      var value = new conns_pulsar_pb.Pulsar;
      reader.readMessage(value,conns_pulsar_pb.Pulsar.deserializeBinaryFromReader);
      msg.setPulsar(value);
      break;
    case 110:
      var value = new conns_rabbit_pb.Rabbit;
      reader.readMessage(value,conns_rabbit_pb.Rabbit.deserializeBinaryFromReader);
      msg.setRabbit(value);
      break;
    case 111:
      var value = new conns_rabbit$streams_pb.RabbitStreams;
      reader.readMessage(value,conns_rabbit$streams_pb.RabbitStreams.deserializeBinaryFromReader);
      msg.setRabbitStreams(value);
      break;
    case 112:
      var value = new conns_redis$pubsub_pb.RedisPubsub;
      reader.readMessage(value,conns_redis$pubsub_pb.RedisPubsub.deserializeBinaryFromReader);
      msg.setRedisPubsub(value);
      break;
    case 113:
      var value = new conns_redis$streams_pb.RedisStreams;
      reader.readMessage(value,conns_redis$streams_pb.RedisStreams.deserializeBinaryFromReader);
      msg.setRedisStreams(value);
      break;
    case 114:
      var value = new conns_azure$event$hub_pb.AzureEventHub;
      reader.readMessage(value,conns_azure$event$hub_pb.AzureEventHub.deserializeBinaryFromReader);
      msg.setAzureEventHub(value);
      break;
    case 115:
      var value = new conns_azure$service$bus_pb.AzureServiceBus;
      reader.readMessage(value,conns_azure$service$bus_pb.AzureServiceBus.deserializeBinaryFromReader);
      msg.setAzureServiceBus(value);
      break;
    case 116:
      var value = new conns_kubemq_pb.KubeMQ;
      reader.readMessage(value,conns_kubemq_pb.KubeMQ.deserializeBinaryFromReader);
      msg.setKubemq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ConnectionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ConnectionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ConnectionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ConnectionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      conns_kafka_pb.Kafka.serializeBinaryToWriter
    );
  }
  f = message.getActiveMq();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      conns_activemq_pb.ActiveMQ.serializeBinaryToWriter
    );
  }
  f = message.getAwssqs();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      conns_aws$sqs_pb.AWSSQS.serializeBinaryToWriter
    );
  }
  f = message.getAwssns();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      conns_aws$sns_pb.AWSSNS.serializeBinaryToWriter
    );
  }
  f = message.getMongo();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      conns_mongo_pb.Mongo.serializeBinaryToWriter
    );
  }
  f = message.getNats();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      conns_nats_pb.Nats.serializeBinaryToWriter
    );
  }
  f = message.getNatsStreaming();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      conns_nats$streaming_pb.NatsStreaming.serializeBinaryToWriter
    );
  }
  f = message.getNsq();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      conns_nsq_pb.NSQ.serializeBinaryToWriter
    );
  }
  f = message.getPostgres();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      conns_postgres_pb.Postgres.serializeBinaryToWriter
    );
  }
  f = message.getPulsar();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      conns_pulsar_pb.Pulsar.serializeBinaryToWriter
    );
  }
  f = message.getRabbit();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      conns_rabbit_pb.Rabbit.serializeBinaryToWriter
    );
  }
  f = message.getRabbitStreams();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      conns_rabbit$streams_pb.RabbitStreams.serializeBinaryToWriter
    );
  }
  f = message.getRedisPubsub();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      conns_redis$pubsub_pb.RedisPubsub.serializeBinaryToWriter
    );
  }
  f = message.getRedisStreams();
  if (f != null) {
    writer.writeMessage(
      113,
      f,
      conns_redis$streams_pb.RedisStreams.serializeBinaryToWriter
    );
  }
  f = message.getAzureEventHub();
  if (f != null) {
    writer.writeMessage(
      114,
      f,
      conns_azure$event$hub_pb.AzureEventHub.serializeBinaryToWriter
    );
  }
  f = message.getAzureServiceBus();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      conns_azure$service$bus_pb.AzureServiceBus.serializeBinaryToWriter
    );
  }
  f = message.getKubemq();
  if (f != null) {
    writer.writeMessage(
      116,
      f,
      conns_kubemq_pb.KubeMQ.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protos.ConnectionConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string notes = 2;
 * @return {string}
 */
proto.protos.ConnectionConfig.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.protos.ConnectionConfig.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional conns.Kafka kafka = 100;
 * @return {?proto.protos.conns.Kafka}
 */
proto.protos.ConnectionConfig.prototype.getKafka = function() {
  return /** @type{?proto.protos.conns.Kafka} */ (
    jspb.Message.getWrapperField(this, conns_kafka_pb.Kafka, 100));
};


/**
 * @param {?proto.protos.conns.Kafka|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setKafka = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional conns.ActiveMQ active_mq = 101;
 * @return {?proto.protos.conns.ActiveMQ}
 */
proto.protos.ConnectionConfig.prototype.getActiveMq = function() {
  return /** @type{?proto.protos.conns.ActiveMQ} */ (
    jspb.Message.getWrapperField(this, conns_activemq_pb.ActiveMQ, 101));
};


/**
 * @param {?proto.protos.conns.ActiveMQ|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setActiveMq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearActiveMq = function() {
  return this.setActiveMq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasActiveMq = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional conns.AWSSQS awssqs = 102;
 * @return {?proto.protos.conns.AWSSQS}
 */
proto.protos.ConnectionConfig.prototype.getAwssqs = function() {
  return /** @type{?proto.protos.conns.AWSSQS} */ (
    jspb.Message.getWrapperField(this, conns_aws$sqs_pb.AWSSQS, 102));
};


/**
 * @param {?proto.protos.conns.AWSSQS|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setAwssqs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearAwssqs = function() {
  return this.setAwssqs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasAwssqs = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional conns.AWSSNS awssns = 103;
 * @return {?proto.protos.conns.AWSSNS}
 */
proto.protos.ConnectionConfig.prototype.getAwssns = function() {
  return /** @type{?proto.protos.conns.AWSSNS} */ (
    jspb.Message.getWrapperField(this, conns_aws$sns_pb.AWSSNS, 103));
};


/**
 * @param {?proto.protos.conns.AWSSNS|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setAwssns = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearAwssns = function() {
  return this.setAwssns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasAwssns = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional conns.Mongo mongo = 104;
 * @return {?proto.protos.conns.Mongo}
 */
proto.protos.ConnectionConfig.prototype.getMongo = function() {
  return /** @type{?proto.protos.conns.Mongo} */ (
    jspb.Message.getWrapperField(this, conns_mongo_pb.Mongo, 104));
};


/**
 * @param {?proto.protos.conns.Mongo|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setMongo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearMongo = function() {
  return this.setMongo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasMongo = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional conns.Nats nats = 105;
 * @return {?proto.protos.conns.Nats}
 */
proto.protos.ConnectionConfig.prototype.getNats = function() {
  return /** @type{?proto.protos.conns.Nats} */ (
    jspb.Message.getWrapperField(this, conns_nats_pb.Nats, 105));
};


/**
 * @param {?proto.protos.conns.Nats|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setNats = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearNats = function() {
  return this.setNats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasNats = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional conns.NatsStreaming nats_streaming = 106;
 * @return {?proto.protos.conns.NatsStreaming}
 */
proto.protos.ConnectionConfig.prototype.getNatsStreaming = function() {
  return /** @type{?proto.protos.conns.NatsStreaming} */ (
    jspb.Message.getWrapperField(this, conns_nats$streaming_pb.NatsStreaming, 106));
};


/**
 * @param {?proto.protos.conns.NatsStreaming|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setNatsStreaming = function(value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearNatsStreaming = function() {
  return this.setNatsStreaming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasNatsStreaming = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional conns.NSQ nsq = 107;
 * @return {?proto.protos.conns.NSQ}
 */
proto.protos.ConnectionConfig.prototype.getNsq = function() {
  return /** @type{?proto.protos.conns.NSQ} */ (
    jspb.Message.getWrapperField(this, conns_nsq_pb.NSQ, 107));
};


/**
 * @param {?proto.protos.conns.NSQ|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setNsq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 107, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearNsq = function() {
  return this.setNsq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasNsq = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional conns.Postgres postgres = 108;
 * @return {?proto.protos.conns.Postgres}
 */
proto.protos.ConnectionConfig.prototype.getPostgres = function() {
  return /** @type{?proto.protos.conns.Postgres} */ (
    jspb.Message.getWrapperField(this, conns_postgres_pb.Postgres, 108));
};


/**
 * @param {?proto.protos.conns.Postgres|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setPostgres = function(value) {
  return jspb.Message.setOneofWrapperField(this, 108, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearPostgres = function() {
  return this.setPostgres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasPostgres = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional conns.Pulsar pulsar = 109;
 * @return {?proto.protos.conns.Pulsar}
 */
proto.protos.ConnectionConfig.prototype.getPulsar = function() {
  return /** @type{?proto.protos.conns.Pulsar} */ (
    jspb.Message.getWrapperField(this, conns_pulsar_pb.Pulsar, 109));
};


/**
 * @param {?proto.protos.conns.Pulsar|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setPulsar = function(value) {
  return jspb.Message.setOneofWrapperField(this, 109, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearPulsar = function() {
  return this.setPulsar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasPulsar = function() {
  return jspb.Message.getField(this, 109) != null;
};


/**
 * optional conns.Rabbit rabbit = 110;
 * @return {?proto.protos.conns.Rabbit}
 */
proto.protos.ConnectionConfig.prototype.getRabbit = function() {
  return /** @type{?proto.protos.conns.Rabbit} */ (
    jspb.Message.getWrapperField(this, conns_rabbit_pb.Rabbit, 110));
};


/**
 * @param {?proto.protos.conns.Rabbit|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setRabbit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 110, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearRabbit = function() {
  return this.setRabbit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasRabbit = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional conns.RabbitStreams rabbit_streams = 111;
 * @return {?proto.protos.conns.RabbitStreams}
 */
proto.protos.ConnectionConfig.prototype.getRabbitStreams = function() {
  return /** @type{?proto.protos.conns.RabbitStreams} */ (
    jspb.Message.getWrapperField(this, conns_rabbit$streams_pb.RabbitStreams, 111));
};


/**
 * @param {?proto.protos.conns.RabbitStreams|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setRabbitStreams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 111, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearRabbitStreams = function() {
  return this.setRabbitStreams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasRabbitStreams = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional conns.RedisPubsub redis_pubsub = 112;
 * @return {?proto.protos.conns.RedisPubsub}
 */
proto.protos.ConnectionConfig.prototype.getRedisPubsub = function() {
  return /** @type{?proto.protos.conns.RedisPubsub} */ (
    jspb.Message.getWrapperField(this, conns_redis$pubsub_pb.RedisPubsub, 112));
};


/**
 * @param {?proto.protos.conns.RedisPubsub|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setRedisPubsub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 112, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearRedisPubsub = function() {
  return this.setRedisPubsub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasRedisPubsub = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional conns.RedisStreams redis_streams = 113;
 * @return {?proto.protos.conns.RedisStreams}
 */
proto.protos.ConnectionConfig.prototype.getRedisStreams = function() {
  return /** @type{?proto.protos.conns.RedisStreams} */ (
    jspb.Message.getWrapperField(this, conns_redis$streams_pb.RedisStreams, 113));
};


/**
 * @param {?proto.protos.conns.RedisStreams|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setRedisStreams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 113, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearRedisStreams = function() {
  return this.setRedisStreams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasRedisStreams = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional conns.AzureEventHub azure_event_hub = 114;
 * @return {?proto.protos.conns.AzureEventHub}
 */
proto.protos.ConnectionConfig.prototype.getAzureEventHub = function() {
  return /** @type{?proto.protos.conns.AzureEventHub} */ (
    jspb.Message.getWrapperField(this, conns_azure$event$hub_pb.AzureEventHub, 114));
};


/**
 * @param {?proto.protos.conns.AzureEventHub|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setAzureEventHub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 114, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearAzureEventHub = function() {
  return this.setAzureEventHub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasAzureEventHub = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional conns.AzureServiceBus azure_service_bus = 115;
 * @return {?proto.protos.conns.AzureServiceBus}
 */
proto.protos.ConnectionConfig.prototype.getAzureServiceBus = function() {
  return /** @type{?proto.protos.conns.AzureServiceBus} */ (
    jspb.Message.getWrapperField(this, conns_azure$service$bus_pb.AzureServiceBus, 115));
};


/**
 * @param {?proto.protos.conns.AzureServiceBus|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setAzureServiceBus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 115, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearAzureServiceBus = function() {
  return this.setAzureServiceBus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasAzureServiceBus = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * optional conns.KubeMQ kubemq = 116;
 * @return {?proto.protos.conns.KubeMQ}
 */
proto.protos.ConnectionConfig.prototype.getKubemq = function() {
  return /** @type{?proto.protos.conns.KubeMQ} */ (
    jspb.Message.getWrapperField(this, conns_kubemq_pb.KubeMQ, 116));
};


/**
 * @param {?proto.protos.conns.KubeMQ|undefined} value
 * @return {!proto.protos.ConnectionConfig} returns this
*/
proto.protos.ConnectionConfig.prototype.setKubemq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 116, proto.protos.ConnectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ConnectionConfig} returns this
 */
proto.protos.ConnectionConfig.prototype.clearKubemq = function() {
  return this.setKubemq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ConnectionConfig.prototype.hasKubemq = function() {
  return jspb.Message.getField(this, 116) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.GetAllConnectionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.GetAllConnectionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.GetAllConnectionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetAllConnectionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && common_auth_pb.Auth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetAllConnectionsRequest}
 */
proto.protos.GetAllConnectionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetAllConnectionsRequest;
  return proto.protos.GetAllConnectionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetAllConnectionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetAllConnectionsRequest}
 */
proto.protos.GetAllConnectionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9999:
      var value = new common_auth_pb.Auth;
      reader.readMessage(value,common_auth_pb.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetAllConnectionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetAllConnectionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetAllConnectionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetAllConnectionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9999,
      f,
      common_auth_pb.Auth.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Auth auth = 9999;
 * @return {?proto.protos.common.Auth}
 */
proto.protos.GetAllConnectionsRequest.prototype.getAuth = function() {
  return /** @type{?proto.protos.common.Auth} */ (
    jspb.Message.getWrapperField(this, common_auth_pb.Auth, 9999));
};


/**
 * @param {?proto.protos.common.Auth|undefined} value
 * @return {!proto.protos.GetAllConnectionsRequest} returns this
*/
proto.protos.GetAllConnectionsRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetAllConnectionsRequest} returns this
 */
proto.protos.GetAllConnectionsRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetAllConnectionsRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9999) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.GetAllConnectionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.GetAllConnectionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.GetAllConnectionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.GetAllConnectionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetAllConnectionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    configsList: jspb.Message.toObjectList(msg.getConfigsList(),
    proto.protos.ConnectionConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetAllConnectionsResponse}
 */
proto.protos.GetAllConnectionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetAllConnectionsResponse;
  return proto.protos.GetAllConnectionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetAllConnectionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetAllConnectionsResponse}
 */
proto.protos.GetAllConnectionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.ConnectionConfig;
      reader.readMessage(value,proto.protos.ConnectionConfig.deserializeBinaryFromReader);
      msg.addConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetAllConnectionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetAllConnectionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetAllConnectionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetAllConnectionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.ConnectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConnectionConfig configs = 1;
 * @return {!Array<!proto.protos.ConnectionConfig>}
 */
proto.protos.GetAllConnectionsResponse.prototype.getConfigsList = function() {
  return /** @type{!Array<!proto.protos.ConnectionConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ConnectionConfig, 1));
};


/**
 * @param {!Array<!proto.protos.ConnectionConfig>} value
 * @return {!proto.protos.GetAllConnectionsResponse} returns this
*/
proto.protos.GetAllConnectionsResponse.prototype.setConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.ConnectionConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ConnectionConfig}
 */
proto.protos.GetAllConnectionsResponse.prototype.addConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.ConnectionConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.GetAllConnectionsResponse} returns this
 */
proto.protos.GetAllConnectionsResponse.prototype.clearConfigsList = function() {
  return this.setConfigsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.GetConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.GetConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.GetConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && common_auth_pb.Auth.toObject(includeInstance, f),
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetConnectionRequest}
 */
proto.protos.GetConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetConnectionRequest;
  return proto.protos.GetConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetConnectionRequest}
 */
proto.protos.GetConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9999:
      var value = new common_auth_pb.Auth;
      reader.readMessage(value,common_auth_pb.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9999,
      f,
      common_auth_pb.Auth.serializeBinaryToWriter
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional common.Auth auth = 9999;
 * @return {?proto.protos.common.Auth}
 */
proto.protos.GetConnectionRequest.prototype.getAuth = function() {
  return /** @type{?proto.protos.common.Auth} */ (
    jspb.Message.getWrapperField(this, common_auth_pb.Auth, 9999));
};


/**
 * @param {?proto.protos.common.Auth|undefined} value
 * @return {!proto.protos.GetConnectionRequest} returns this
*/
proto.protos.GetConnectionRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetConnectionRequest} returns this
 */
proto.protos.GetConnectionRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetConnectionRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9999) != null;
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.protos.GetConnectionRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.GetConnectionRequest} returns this
 */
proto.protos.GetConnectionRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.GetConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.GetConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.GetConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connection: (f = msg.getConnection()) && proto.protos.ConnectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GetConnectionResponse}
 */
proto.protos.GetConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GetConnectionResponse;
  return proto.protos.GetConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GetConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GetConnectionResponse}
 */
proto.protos.GetConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.ConnectionConfig;
      reader.readMessage(value,proto.protos.ConnectionConfig.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GetConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.GetConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GetConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GetConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.ConnectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectionConfig connection = 1;
 * @return {?proto.protos.ConnectionConfig}
 */
proto.protos.GetConnectionResponse.prototype.getConnection = function() {
  return /** @type{?proto.protos.ConnectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.protos.ConnectionConfig, 1));
};


/**
 * @param {?proto.protos.ConnectionConfig|undefined} value
 * @return {!proto.protos.GetConnectionResponse} returns this
*/
proto.protos.GetConnectionResponse.prototype.setConnection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.GetConnectionResponse} returns this
 */
proto.protos.GetConnectionResponse.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.GetConnectionResponse.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.CreateConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.CreateConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.CreateConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CreateConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && common_auth_pb.Auth.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.protos.ConnectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.CreateConnectionRequest}
 */
proto.protos.CreateConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.CreateConnectionRequest;
  return proto.protos.CreateConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.CreateConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.CreateConnectionRequest}
 */
proto.protos.CreateConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9999:
      var value = new common_auth_pb.Auth;
      reader.readMessage(value,common_auth_pb.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 1:
      var value = new proto.protos.ConnectionConfig;
      reader.readMessage(value,proto.protos.ConnectionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.CreateConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.CreateConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.CreateConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CreateConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9999,
      f,
      common_auth_pb.Auth.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.ConnectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Auth auth = 9999;
 * @return {?proto.protos.common.Auth}
 */
proto.protos.CreateConnectionRequest.prototype.getAuth = function() {
  return /** @type{?proto.protos.common.Auth} */ (
    jspb.Message.getWrapperField(this, common_auth_pb.Auth, 9999));
};


/**
 * @param {?proto.protos.common.Auth|undefined} value
 * @return {!proto.protos.CreateConnectionRequest} returns this
*/
proto.protos.CreateConnectionRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CreateConnectionRequest} returns this
 */
proto.protos.CreateConnectionRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CreateConnectionRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9999) != null;
};


/**
 * optional ConnectionConfig config = 1;
 * @return {?proto.protos.ConnectionConfig}
 */
proto.protos.CreateConnectionRequest.prototype.getConfig = function() {
  return /** @type{?proto.protos.ConnectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.protos.ConnectionConfig, 1));
};


/**
 * @param {?proto.protos.ConnectionConfig|undefined} value
 * @return {!proto.protos.CreateConnectionRequest} returns this
*/
proto.protos.CreateConnectionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CreateConnectionRequest} returns this
 */
proto.protos.CreateConnectionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CreateConnectionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.CreateConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.CreateConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.CreateConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CreateConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.CreateConnectionResponse}
 */
proto.protos.CreateConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.CreateConnectionResponse;
  return proto.protos.CreateConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.CreateConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.CreateConnectionResponse}
 */
proto.protos.CreateConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.CreateConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.CreateConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.CreateConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CreateConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.protos.CreateConnectionResponse.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.CreateConnectionResponse} returns this
 */
proto.protos.CreateConnectionResponse.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.TestConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.TestConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.TestConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.TestConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && common_auth_pb.Auth.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.protos.ConnectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.TestConnectionRequest}
 */
proto.protos.TestConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.TestConnectionRequest;
  return proto.protos.TestConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.TestConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.TestConnectionRequest}
 */
proto.protos.TestConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9999:
      var value = new common_auth_pb.Auth;
      reader.readMessage(value,common_auth_pb.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 1:
      var value = new proto.protos.ConnectionConfig;
      reader.readMessage(value,proto.protos.ConnectionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.TestConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.TestConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.TestConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.TestConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9999,
      f,
      common_auth_pb.Auth.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.ConnectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Auth auth = 9999;
 * @return {?proto.protos.common.Auth}
 */
proto.protos.TestConnectionRequest.prototype.getAuth = function() {
  return /** @type{?proto.protos.common.Auth} */ (
    jspb.Message.getWrapperField(this, common_auth_pb.Auth, 9999));
};


/**
 * @param {?proto.protos.common.Auth|undefined} value
 * @return {!proto.protos.TestConnectionRequest} returns this
*/
proto.protos.TestConnectionRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.TestConnectionRequest} returns this
 */
proto.protos.TestConnectionRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.TestConnectionRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9999) != null;
};


/**
 * optional ConnectionConfig config = 1;
 * @return {?proto.protos.ConnectionConfig}
 */
proto.protos.TestConnectionRequest.prototype.getConfig = function() {
  return /** @type{?proto.protos.ConnectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.protos.ConnectionConfig, 1));
};


/**
 * @param {?proto.protos.ConnectionConfig|undefined} value
 * @return {!proto.protos.TestConnectionRequest} returns this
*/
proto.protos.TestConnectionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.TestConnectionRequest} returns this
 */
proto.protos.TestConnectionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.TestConnectionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.TestConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.TestConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.TestConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.TestConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && common_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.TestConnectionResponse}
 */
proto.protos.TestConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.TestConnectionResponse;
  return proto.protos.TestConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.TestConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.TestConnectionResponse}
 */
proto.protos.TestConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1000:
      var value = new common_status_pb.Status;
      reader.readMessage(value,common_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.TestConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.TestConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.TestConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.TestConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      common_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Status status = 1000;
 * @return {?proto.protos.common.Status}
 */
proto.protos.TestConnectionResponse.prototype.getStatus = function() {
  return /** @type{?proto.protos.common.Status} */ (
    jspb.Message.getWrapperField(this, common_status_pb.Status, 1000));
};


/**
 * @param {?proto.protos.common.Status|undefined} value
 * @return {!proto.protos.TestConnectionResponse} returns this
*/
proto.protos.TestConnectionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1000, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.TestConnectionResponse} returns this
 */
proto.protos.TestConnectionResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.TestConnectionResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1000) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.UpdateConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.UpdateConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.UpdateConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.UpdateConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && common_auth_pb.Auth.toObject(includeInstance, f),
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    config: (f = msg.getConfig()) && proto.protos.ConnectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.UpdateConnectionRequest}
 */
proto.protos.UpdateConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.UpdateConnectionRequest;
  return proto.protos.UpdateConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.UpdateConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.UpdateConnectionRequest}
 */
proto.protos.UpdateConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9999:
      var value = new common_auth_pb.Auth;
      reader.readMessage(value,common_auth_pb.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = new proto.protos.ConnectionConfig;
      reader.readMessage(value,proto.protos.ConnectionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.UpdateConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.UpdateConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.UpdateConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.UpdateConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9999,
      f,
      common_auth_pb.Auth.serializeBinaryToWriter
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.ConnectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Auth auth = 9999;
 * @return {?proto.protos.common.Auth}
 */
proto.protos.UpdateConnectionRequest.prototype.getAuth = function() {
  return /** @type{?proto.protos.common.Auth} */ (
    jspb.Message.getWrapperField(this, common_auth_pb.Auth, 9999));
};


/**
 * @param {?proto.protos.common.Auth|undefined} value
 * @return {!proto.protos.UpdateConnectionRequest} returns this
*/
proto.protos.UpdateConnectionRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.UpdateConnectionRequest} returns this
 */
proto.protos.UpdateConnectionRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.UpdateConnectionRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9999) != null;
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.protos.UpdateConnectionRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.UpdateConnectionRequest} returns this
 */
proto.protos.UpdateConnectionRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ConnectionConfig config = 2;
 * @return {?proto.protos.ConnectionConfig}
 */
proto.protos.UpdateConnectionRequest.prototype.getConfig = function() {
  return /** @type{?proto.protos.ConnectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.protos.ConnectionConfig, 2));
};


/**
 * @param {?proto.protos.ConnectionConfig|undefined} value
 * @return {!proto.protos.UpdateConnectionRequest} returns this
*/
proto.protos.UpdateConnectionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.UpdateConnectionRequest} returns this
 */
proto.protos.UpdateConnectionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.UpdateConnectionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.UpdateConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.UpdateConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.UpdateConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.UpdateConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && common_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.UpdateConnectionResponse}
 */
proto.protos.UpdateConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.UpdateConnectionResponse;
  return proto.protos.UpdateConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.UpdateConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.UpdateConnectionResponse}
 */
proto.protos.UpdateConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1000:
      var value = new common_status_pb.Status;
      reader.readMessage(value,common_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.UpdateConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.UpdateConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.UpdateConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.UpdateConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      common_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Status status = 1000;
 * @return {?proto.protos.common.Status}
 */
proto.protos.UpdateConnectionResponse.prototype.getStatus = function() {
  return /** @type{?proto.protos.common.Status} */ (
    jspb.Message.getWrapperField(this, common_status_pb.Status, 1000));
};


/**
 * @param {?proto.protos.common.Status|undefined} value
 * @return {!proto.protos.UpdateConnectionResponse} returns this
*/
proto.protos.UpdateConnectionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1000, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.UpdateConnectionResponse} returns this
 */
proto.protos.UpdateConnectionResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.UpdateConnectionResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1000) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.DeleteConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.DeleteConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.DeleteConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeleteConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && common_auth_pb.Auth.toObject(includeInstance, f),
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.DeleteConnectionRequest}
 */
proto.protos.DeleteConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.DeleteConnectionRequest;
  return proto.protos.DeleteConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.DeleteConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.DeleteConnectionRequest}
 */
proto.protos.DeleteConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9999:
      var value = new common_auth_pb.Auth;
      reader.readMessage(value,common_auth_pb.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.DeleteConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.DeleteConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.DeleteConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeleteConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      9999,
      f,
      common_auth_pb.Auth.serializeBinaryToWriter
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional common.Auth auth = 9999;
 * @return {?proto.protos.common.Auth}
 */
proto.protos.DeleteConnectionRequest.prototype.getAuth = function() {
  return /** @type{?proto.protos.common.Auth} */ (
    jspb.Message.getWrapperField(this, common_auth_pb.Auth, 9999));
};


/**
 * @param {?proto.protos.common.Auth|undefined} value
 * @return {!proto.protos.DeleteConnectionRequest} returns this
*/
proto.protos.DeleteConnectionRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 9999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.DeleteConnectionRequest} returns this
 */
proto.protos.DeleteConnectionRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeleteConnectionRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 9999) != null;
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.protos.DeleteConnectionRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.DeleteConnectionRequest} returns this
 */
proto.protos.DeleteConnectionRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.DeleteConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.DeleteConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.DeleteConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeleteConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && common_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.DeleteConnectionResponse}
 */
proto.protos.DeleteConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.DeleteConnectionResponse;
  return proto.protos.DeleteConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.DeleteConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.DeleteConnectionResponse}
 */
proto.protos.DeleteConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1000:
      var value = new common_status_pb.Status;
      reader.readMessage(value,common_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.DeleteConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.DeleteConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.DeleteConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeleteConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      common_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Status status = 1000;
 * @return {?proto.protos.common.Status}
 */
proto.protos.DeleteConnectionResponse.prototype.getStatus = function() {
  return /** @type{?proto.protos.common.Status} */ (
    jspb.Message.getWrapperField(this, common_status_pb.Status, 1000));
};


/**
 * @param {?proto.protos.common.Status|undefined} value
 * @return {!proto.protos.DeleteConnectionResponse} returns this
*/
proto.protos.DeleteConnectionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1000, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.DeleteConnectionResponse} returns this
 */
proto.protos.DeleteConnectionResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeleteConnectionResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1000) != null;
};


goog.object.extend(exports, proto.protos);
