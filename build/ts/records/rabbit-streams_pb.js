// source: records/rabbit-streams.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.records.RabbitStreams', null, global);
goog.exportSymbol('proto.protos.records.RabbitStreamsFooter', null, global);
goog.exportSymbol('proto.protos.records.RabbitStreamsHeader', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.records.RabbitStreams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.records.RabbitStreams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.records.RabbitStreams.displayName = 'proto.protos.records.RabbitStreams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.records.RabbitStreamsHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.records.RabbitStreamsHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.records.RabbitStreamsHeader.displayName = 'proto.protos.records.RabbitStreamsHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.records.RabbitStreamsFooter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.records.RabbitStreamsFooter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.records.RabbitStreamsFooter.displayName = 'proto.protos.records.RabbitStreamsFooter';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.records.RabbitStreams.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.records.RabbitStreams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.records.RabbitStreams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.RabbitStreams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deliveryTag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    format: jspb.Message.getFieldWithDefault(msg, 2, 0),
    header: (f = msg.getHeader()) && proto.protos.records.RabbitStreamsHeader.toObject(includeInstance, f),
    deliveryAnnotationsMap: (f = msg.getDeliveryAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    footerMap: (f = msg.getFooterMap()) ? f.toObject(includeInstance, undefined) : [],
    sendSettled: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    streamName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.records.RabbitStreams}
 */
proto.protos.records.RabbitStreams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.records.RabbitStreams;
  return proto.protos.records.RabbitStreams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.records.RabbitStreams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.records.RabbitStreams}
 */
proto.protos.records.RabbitStreams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeliveryTag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFormat(value);
      break;
    case 3:
      var value = new proto.protos.records.RabbitStreamsHeader;
      reader.readMessage(value,proto.protos.records.RabbitStreamsHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 4:
      var value = msg.getDeliveryAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = msg.getFooterMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendSettled(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamName(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.records.RabbitStreams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.records.RabbitStreams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.records.RabbitStreams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.RabbitStreams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeliveryTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.records.RabbitStreamsHeader.serializeBinaryToWriter
    );
  }
  f = message.getDeliveryAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getFooterMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSendSettled();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getStreamName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional string delivery_tag = 1;
 * @return {string}
 */
proto.protos.records.RabbitStreams.prototype.getDeliveryTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.setDeliveryTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 format = 2;
 * @return {number}
 */
proto.protos.records.RabbitStreams.prototype.getFormat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.setFormat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RabbitStreamsHeader header = 3;
 * @return {?proto.protos.records.RabbitStreamsHeader}
 */
proto.protos.records.RabbitStreams.prototype.getHeader = function() {
  return /** @type{?proto.protos.records.RabbitStreamsHeader} */ (
    jspb.Message.getWrapperField(this, proto.protos.records.RabbitStreamsHeader, 3));
};


/**
 * @param {?proto.protos.records.RabbitStreamsHeader|undefined} value
 * @return {!proto.protos.records.RabbitStreams} returns this
*/
proto.protos.records.RabbitStreams.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.records.RabbitStreams.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> delivery_annotations = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.records.RabbitStreams.prototype.getDeliveryAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.clearDeliveryAnnotationsMap = function() {
  this.getDeliveryAnnotationsMap().clear();
  return this;};


/**
 * map<string, string> footer = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.records.RabbitStreams.prototype.getFooterMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.clearFooterMap = function() {
  this.getFooterMap().clear();
  return this;};


/**
 * optional bool send_settled = 6;
 * @return {boolean}
 */
proto.protos.records.RabbitStreams.prototype.getSendSettled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.setSendSettled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string stream_name = 7;
 * @return {string}
 */
proto.protos.records.RabbitStreams.prototype.getStreamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.setStreamName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 timestamp = 8;
 * @return {number}
 */
proto.protos.records.RabbitStreams.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes value = 9;
 * @return {!(string|Uint8Array)}
 */
proto.protos.records.RabbitStreams.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes value = 9;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.protos.records.RabbitStreams.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.protos.records.RabbitStreams.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.records.RabbitStreams} returns this
 */
proto.protos.records.RabbitStreams.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.records.RabbitStreamsHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.records.RabbitStreamsHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.records.RabbitStreamsHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.RabbitStreamsHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    to: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subject: jspb.Message.getFieldWithDefault(msg, 4, ""),
    replayTo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    correlationId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    contentEncoding: jspb.Message.getFieldWithDefault(msg, 8, ""),
    absoluteExpiryTime: jspb.Message.getFieldWithDefault(msg, 9, ""),
    creationTime: jspb.Message.getFieldWithDefault(msg, 10, ""),
    groupId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    groupSequence: jspb.Message.getFieldWithDefault(msg, 12, 0),
    replayToGroupId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.records.RabbitStreamsHeader}
 */
proto.protos.records.RabbitStreamsHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.records.RabbitStreamsHeader;
  return proto.protos.records.RabbitStreamsHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.records.RabbitStreamsHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.records.RabbitStreamsHeader}
 */
proto.protos.records.RabbitStreamsHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplayTo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentEncoding(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbsoluteExpiryTime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationTime(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupSequence(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplayToGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.records.RabbitStreamsHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.records.RabbitStreamsHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.records.RabbitStreamsHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.RabbitStreamsHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReplayTo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContentEncoding();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAbsoluteExpiryTime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreationTime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getGroupSequence();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getReplayToGroupId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to = 3;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subject = 4;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string replay_to = 5;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getReplayTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setReplayTo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string correlation_id = 6;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setCorrelationId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string content_type = 7;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setContentType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string content_encoding = 8;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getContentEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setContentEncoding = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string absolute_expiry_time = 9;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getAbsoluteExpiryTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setAbsoluteExpiryTime = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string creation_time = 10;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getCreationTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setCreationTime = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string group_id = 11;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint32 group_sequence = 12;
 * @return {number}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getGroupSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setGroupSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string replay_to_group_id = 13;
 * @return {string}
 */
proto.protos.records.RabbitStreamsHeader.prototype.getReplayToGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.RabbitStreamsHeader} returns this
 */
proto.protos.records.RabbitStreamsHeader.prototype.setReplayToGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.records.RabbitStreamsFooter.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.records.RabbitStreamsFooter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.records.RabbitStreamsFooter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.RabbitStreamsFooter.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.records.RabbitStreamsFooter}
 */
proto.protos.records.RabbitStreamsFooter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.records.RabbitStreamsFooter;
  return proto.protos.records.RabbitStreamsFooter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.records.RabbitStreamsFooter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.records.RabbitStreamsFooter}
 */
proto.protos.records.RabbitStreamsFooter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.records.RabbitStreamsFooter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.records.RabbitStreamsFooter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.records.RabbitStreamsFooter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.RabbitStreamsFooter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.protos.records);
