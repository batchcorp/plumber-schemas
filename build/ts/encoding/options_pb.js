// source: encoding/options.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.encoding.Avro', null, global);
goog.exportSymbol('proto.protos.encoding.JSONSchema', null, global);
goog.exportSymbol('proto.protos.encoding.Options', null, global);
goog.exportSymbol('proto.protos.encoding.Options.EncodingCase', null, global);
goog.exportSymbol('proto.protos.encoding.Protobuf', null, global);
goog.exportSymbol('proto.protos.encoding.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.encoding.Protobuf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.encoding.Protobuf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.encoding.Protobuf.displayName = 'proto.protos.encoding.Protobuf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.encoding.JSONSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.encoding.JSONSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.encoding.JSONSchema.displayName = 'proto.protos.encoding.JSONSchema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.encoding.Avro = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.encoding.Avro, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.encoding.Avro.displayName = 'proto.protos.encoding.Avro';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.encoding.Options = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.encoding.Options.oneofGroups_);
};
goog.inherits(proto.protos.encoding.Options, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.encoding.Options.displayName = 'proto.protos.encoding.Options';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.encoding.Protobuf.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.encoding.Protobuf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.encoding.Protobuf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.Protobuf.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    zipArchive: msg.getZipArchive_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.encoding.Protobuf}
 */
proto.protos.encoding.Protobuf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.encoding.Protobuf;
  return proto.protos.encoding.Protobuf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.encoding.Protobuf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.encoding.Protobuf}
 */
proto.protos.encoding.Protobuf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setZipArchive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.encoding.Protobuf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.encoding.Protobuf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.encoding.Protobuf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.Protobuf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getZipArchive_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string root_type = 1;
 * @return {string}
 */
proto.protos.encoding.Protobuf.prototype.getRootType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.encoding.Protobuf} returns this
 */
proto.protos.encoding.Protobuf.prototype.setRootType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes zip_archive = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protos.encoding.Protobuf.prototype.getZipArchive = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes zip_archive = 2;
 * This is a type-conversion wrapper around `getZipArchive()`
 * @return {string}
 */
proto.protos.encoding.Protobuf.prototype.getZipArchive_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getZipArchive()));
};


/**
 * optional bytes zip_archive = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getZipArchive()`
 * @return {!Uint8Array}
 */
proto.protos.encoding.Protobuf.prototype.getZipArchive_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getZipArchive()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.encoding.Protobuf} returns this
 */
proto.protos.encoding.Protobuf.prototype.setZipArchive = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.encoding.JSONSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.encoding.JSONSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.encoding.JSONSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.JSONSchema.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.encoding.JSONSchema}
 */
proto.protos.encoding.JSONSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.encoding.JSONSchema;
  return proto.protos.encoding.JSONSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.encoding.JSONSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.encoding.JSONSchema}
 */
proto.protos.encoding.JSONSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.encoding.JSONSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.encoding.JSONSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.encoding.JSONSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.JSONSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.encoding.Avro.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.encoding.Avro.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.encoding.Avro} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.Avro.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: msg.getSchema_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.encoding.Avro}
 */
proto.protos.encoding.Avro.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.encoding.Avro;
  return proto.protos.encoding.Avro.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.encoding.Avro} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.encoding.Avro}
 */
proto.protos.encoding.Avro.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.encoding.Avro.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.encoding.Avro.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.encoding.Avro} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.Avro.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Schema = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protos.encoding.Avro.prototype.getSchema = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Schema = 1;
 * This is a type-conversion wrapper around `getSchema()`
 * @return {string}
 */
proto.protos.encoding.Avro.prototype.getSchema_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSchema()));
};


/**
 * optional bytes Schema = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSchema()`
 * @return {!Uint8Array}
 */
proto.protos.encoding.Avro.prototype.getSchema_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSchema()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.encoding.Avro} returns this
 */
proto.protos.encoding.Avro.prototype.setSchema = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.encoding.Options.oneofGroups_ = [[100,102,101]];

/**
 * @enum {number}
 */
proto.protos.encoding.Options.EncodingCase = {
  ENCODING_NOT_SET: 0,
  PROTOBUF: 100,
  AVRO: 102,
  JSON_SCHEMA: 101
};

/**
 * @return {proto.protos.encoding.Options.EncodingCase}
 */
proto.protos.encoding.Options.prototype.getEncodingCase = function() {
  return /** @type {proto.protos.encoding.Options.EncodingCase} */(jspb.Message.computeOneofCase(this, proto.protos.encoding.Options.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.encoding.Options.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.encoding.Options.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.encoding.Options} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.Options.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    protobuf: (f = msg.getProtobuf()) && proto.protos.encoding.Protobuf.toObject(includeInstance, f),
    avro: (f = msg.getAvro()) && proto.protos.encoding.Avro.toObject(includeInstance, f),
    jsonSchema: (f = msg.getJsonSchema()) && proto.protos.encoding.JSONSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.encoding.Options}
 */
proto.protos.encoding.Options.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.encoding.Options;
  return proto.protos.encoding.Options.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.encoding.Options} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.encoding.Options}
 */
proto.protos.encoding.Options.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protos.encoding.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 100:
      var value = new proto.protos.encoding.Protobuf;
      reader.readMessage(value,proto.protos.encoding.Protobuf.deserializeBinaryFromReader);
      msg.setProtobuf(value);
      break;
    case 102:
      var value = new proto.protos.encoding.Avro;
      reader.readMessage(value,proto.protos.encoding.Avro.deserializeBinaryFromReader);
      msg.setAvro(value);
      break;
    case 101:
      var value = new proto.protos.encoding.JSONSchema;
      reader.readMessage(value,proto.protos.encoding.JSONSchema.deserializeBinaryFromReader);
      msg.setJsonSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.encoding.Options.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.encoding.Options.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.encoding.Options} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.encoding.Options.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getProtobuf();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.protos.encoding.Protobuf.serializeBinaryToWriter
    );
  }
  f = message.getAvro();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.protos.encoding.Avro.serializeBinaryToWriter
    );
  }
  f = message.getJsonSchema();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.protos.encoding.JSONSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.protos.encoding.Type}
 */
proto.protos.encoding.Options.prototype.getType = function() {
  return /** @type {!proto.protos.encoding.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.protos.encoding.Type} value
 * @return {!proto.protos.encoding.Options} returns this
 */
proto.protos.encoding.Options.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Protobuf protobuf = 100;
 * @return {?proto.protos.encoding.Protobuf}
 */
proto.protos.encoding.Options.prototype.getProtobuf = function() {
  return /** @type{?proto.protos.encoding.Protobuf} */ (
    jspb.Message.getWrapperField(this, proto.protos.encoding.Protobuf, 100));
};


/**
 * @param {?proto.protos.encoding.Protobuf|undefined} value
 * @return {!proto.protos.encoding.Options} returns this
*/
proto.protos.encoding.Options.prototype.setProtobuf = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.protos.encoding.Options.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.encoding.Options} returns this
 */
proto.protos.encoding.Options.prototype.clearProtobuf = function() {
  return this.setProtobuf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.encoding.Options.prototype.hasProtobuf = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional Avro avro = 102;
 * @return {?proto.protos.encoding.Avro}
 */
proto.protos.encoding.Options.prototype.getAvro = function() {
  return /** @type{?proto.protos.encoding.Avro} */ (
    jspb.Message.getWrapperField(this, proto.protos.encoding.Avro, 102));
};


/**
 * @param {?proto.protos.encoding.Avro|undefined} value
 * @return {!proto.protos.encoding.Options} returns this
*/
proto.protos.encoding.Options.prototype.setAvro = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.protos.encoding.Options.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.encoding.Options} returns this
 */
proto.protos.encoding.Options.prototype.clearAvro = function() {
  return this.setAvro(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.encoding.Options.prototype.hasAvro = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional JSONSchema json_schema = 101;
 * @return {?proto.protos.encoding.JSONSchema}
 */
proto.protos.encoding.Options.prototype.getJsonSchema = function() {
  return /** @type{?proto.protos.encoding.JSONSchema} */ (
    jspb.Message.getWrapperField(this, proto.protos.encoding.JSONSchema, 101));
};


/**
 * @param {?proto.protos.encoding.JSONSchema|undefined} value
 * @return {!proto.protos.encoding.Options} returns this
*/
proto.protos.encoding.Options.prototype.setJsonSchema = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.protos.encoding.Options.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.encoding.Options} returns this
 */
proto.protos.encoding.Options.prototype.clearJsonSchema = function() {
  return this.setJsonSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.encoding.Options.prototype.hasJsonSchema = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * @enum {number}
 */
proto.protos.encoding.Type = {
  NONE: 0,
  JSON: 1,
  JSON_SCHEMA: 2,
  PROTOBUF: 3,
  AVRO: 4
};

goog.object.extend(exports, proto.protos.encoding);
